{% import 'inputs/macros.j2' as macros %}

<!-- Main modal -->
<div x-cloak x-show="showAddVersionModal" id="addVersionModal" tabindex="-1" aria-hidden="true"
    x-data="addVersionFormData();"
    class="fixed top-0 left-0 right-0 z-50 w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-full max-h-full dark:bg-neutral-700/40 flex justify-center items-center"
    x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0 "
    x-transition:enter-end="opacity-100" x-transition:leave="ease-in duration-300"
    x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0">
    <div class="relative w-full max-w-2xl max-h-full " @click.away="hideModal()" x-show="showAddVersionModal"
        x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0 scale-90"
        x-transition:enter-end="opacity-100 scale-100" x-transition:leave="ease-in duration-300"
        x-transition:leave-start="opacity-100 scale-100" x-transition:leave-end="opacity-0 scale-90">
        <!-- Modal content -->
        <div class="relative bg-white rounded-2xl shadow dark:bg-neutral-900">
            <!-- Modal header -->
            <div class="flex items-start justify-between p-4 border-b rounded-t dark:border-gray-600">
                <div class="flex flex-col">
                    <h3 class="text-2xl font-semibold text-gray-900 dark:text-white">
                        Add Version
                    </h3>

                </div>
                <button type="button" @click="hideModal()"
                    class="text-gray-400 transition-colors duration-300 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center dark:hover:bg-gray-600 dark:hover:text-white"
                    data-modal-hide="defaultModal">
                    <svg aria-hidden="true" class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"
                        xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd"
                            d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                            clip-rule="evenodd"></path>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
            </div>
            <!-- Modal body -->
            <div class="px-4 pb-4 space-y-6">
                <form x-ref="addVersionForm" @submit.prevent="submitForm" class="mt-5" id="addVersionForm"
                    x-data="{ fileChosen: false, name: '', publisher: '', identifier: '', identifierEditedManually : false}"
                    x-data="{'fileChosen': false}"
                    action="{{ url_for('api.add_version', identifier=package.identifier) }}" method="POST"
                    enctype="multipart/form-data">


                    <div class="mt-2">
                        <label for="installer-version" class="block  text-gray-700 dark:text-gray-300">Version<span
                                class="text-red-500">*</span></label>
                        <input required name="installer-version" placeholder="" type="text"
                            class="block w-full px-3 py-2 mt-1 text-gray-600 dark:text-gray-200 placeholder-gray-400 bg-white dark:bg-neutral-950 border border-gray-200 dark:border-gray-50/30 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40">
                    </div>


    {% if current_user.role.has_permission('add:installer') %}

                    {{ macros.file_upload(hasVersion=false) }}

{% endif %}
                    <div x-show="!showUploadButton"
                        class="min-w-[5%] h-auto p-2 mt-4 rounded-md w-min bg-blue-600 flex flex-row justify-end text-white text-lg font-semibold "
                        x-bind:style="'width: ' + progress + '%; transition: width 0.5s ease-in-out;'">
                        <p x-text="progress"></p>
                    </div>
                </form>
            </div>
            <!-- Modal footer -->
            <div x-show="showUploadButton" class="flex items-center justify-end p-4 space-x-2 dark:border-gray-600">
                <button type="submit" type="button" form="addVersionForm"
                    class="px-3 py-2 tracking-wide text-white   transition-colors duration-300 transform bg-blue-700 hover:bg-blue-800 rounded-md focus:outline-none focus:bg-blue-800 focus:ring focus:ring-blue-300 focus:ring-opacity-50">Add
                    Version</button>
            </div>
        </div>
    </div>
</div>


{% if global_settings['USE_S3'] %}
<script>
    function addVersionFormData() {
        return {
            progress: 0,
            showUploadButton: true,

            submitForm() {
                const formData = new FormData(this.$refs.addVersionForm);
                const file = formData.get('installer-file');
                const fileName = file ? file.name : null;

                formData.delete('installer-file');
                if (fileName) {
                    formData.append('file_name', fileName);
                    formData.append('content_type', file.type);

                    formData.append('publisher', '{{ package.publisher }}');
                    formData.append('name', '{{ package.name }}');
                    formData.append('identifier', '{{ package.identifier }}');

                }

                if (file && file.size > 0) {
                    this.generate_presigned_url(formData, file);
                } else {
                    this.addToPackages(null);
                }
                
            },

            generate_presigned_url(formData, file) {
                formData.delete('installer-file');
                const config = {
                        headers: {
                            'Content-Type': 'multipart/form-data'
                        },
                        onUploadProgress: progressEvent => {
                            this.progress = Math.round((progressEvent.loaded / progressEvent.total) * 100);
                        }
                    }

                axios.post('{{ url_for('api.generate_presigned_url')}}', formData, config)
                    .then(response => {
                        if (response.status === 200) {
                            const parts = file.name.split('.');
                            const extension = parts.length > 1 ? parts.pop() : null;
                            let newFormData = new FormData();
                            newFormData.append('file', file, `${formData.get('installer-installer_scope')}.${extension}`);
                            this.uploadFile(response.data, newFormData.get('file'));
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        window.dispatchEvent(new CustomEvent('notice', {
                            detail: {
                                text: error.response.data.error,
                                type: 'error'
                            }
                        }));
                    });
            },

            uploadFile(data, file) {
                this.progress = 0;
                this.showUploadButton = false;

                const config = {
                    headers: {
                        'Content-Type': data.content_type
                    },
                    onUploadProgress: progressEvent => {
                        this.progress = Math.round((progressEvent.loaded / progressEvent.total) * 100);
                    }
                }

                axios.put(data.presigned_url, file, config)
                    .then(response => {
                        if (response.status === 200) {
                            this.addToPackages(file);
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        window.dispatchEvent(new CustomEvent('notice', {
                            detail: {
                                text: 'Error uploading the file.',
                                type: 'error'
                            }
                        }));
                    });
            },

            addToPackages(file) {
                const formData = new FormData(this.$refs.addVersionForm);
                if (file) {
                    formData.append('installer-is_aws', true);
                    formData.append('installer-url', file.name);
                } else {
                    formData.append('installer-is_aws', false);
                }
                formData.delete('installer-file');

                axios.post(this.$refs.addVersionForm.action, formData)
                    .then(response => {
                        if (response.status === 200) {
                            this.showAddVersionModal = false;
                            this.$refs.addVersionForm.reset();
                            location.reload();
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        window.dispatchEvent(new CustomEvent('notice', {
                            detail: {
                                text: 'Error adding the package.',
                                type: 'error'
                            }
                        }));
                    })
                    .finally(() => {
                        this.showUploadButton = true;
                        
                    });
            },

            hideUploadButton() {
                this.showUploadButton = false;
            },

            hideModal() {
                this.showAddVersionModal = false;
                document.getElementById("addVersionForm").reset();
            }
        };
    }
</script>
{% else %}
<script>
    function addVersionFormData() {
        return {
            progress: 0,

            showUploadButton: true,
            submitForm() {
                this.showUploadButton = false;
                let formData = new FormData(this.$refs.addVersionForm);

                const config = {
                    headers: {
                        'Content-Type': 'multipart/form-data'
                    },
                    onUploadProgress: progressEvent => {
                        this.progress = Math.round(progressEvent.progress * 100);
                        console.log(this.progress);

                    }
                }

                axios.post(this.$refs.addVersionForm.action, formData, config)
                    .then(response => {
                        if (response.status === 200) {
                            this.progress = 0;
                            this.showAddVersionModal = false;
                            this.$refs.addVersionForm.reset();
                            location.reload();
                        }
                    })
                    .catch(error => {
                        console.error(error);
                        window.dispatchEvent(new CustomEvent('notice', {
                            detail: {
                                text: error.response.data,
                                type: 'error'
                            }
                        }));
                    })
                    .finally(() => {
                        this.showUploadButton = true;
                    });
            },
            hideUploadButton() {
                this.showUploadButton = false;
            },
            hideModal() {
                this.showAddVersionModal = false;
                // Get the form by its id and reset it
                fileChosen = false;
                document.getElementById("addVersionForm").reset();
            }
        };
    }
</script>
{% endif %}
