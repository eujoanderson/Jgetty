{% extends "base.j2" %}
{% set title = "Settings" %}
{% block content %}
<h1 class="text-3xl font-medium text-gray-800 dark:text-gray-300">{{title}}</h1>
<div class="mt-4 dark:text-gray-200">




    <div x-data="settingsForm()" x-init="fetchSettings()" class="flex flex-col space-y-4 max-w-xl w-full">
        <template x-for="setting in settings" :key="setting.key">
            <div x-show="!isDisabled(setting.depends_on)" x-transition:enter="transition ease-out duration-300"
                x-transition:enter-start="opacity-0 scale-90" x-transition:enter-end="opacity-100 scale-100"
                x-transition:leave="transition ease-in duration-300" x-transition:leave-start="opacity-100 scale-100"
                x-transition:leave-end="opacity-0 scale-90">
                <div class="flex flex-row items-center space-x-4 justify-between" x-show="setting.type === 'boolean'">
                    <label :for="setting.key" class="text-lg" @click.prevent>
                        <div class="flex flex-col">
                            <p x-text="setting.name"></p>
                            <p class="text-xs text-gray-500 dark:text-gray-400" x-text="setting.description"></p>
                            <p x-show="setting.is_env" class="text-sm text-red-500 dark:text-red-400">This setting is
                                currently set
                                via an environment variable and cannot be changed here.</p>
                        </div>
                    </label>

                    <label class="inline-flex items-center cursor-pointer">
                        <input type="checkbox" :id="setting.key" :name="setting.key" class="sr-only peer"
                            :checked="setting.value" @change="updateSetting(setting, $event)">
                        <div
                            class="relative w-11 h-6 bg-gray-300 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-neutral-900 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600">
                        </div>
                    </label>
                </div>

                <div class="flex flex-col" x-show="setting.type === 'string'">
                    <label :for="setting.key" class="text-lg" @click.prevent>
                        <div class="flex flex-col">
                            <p x-text="setting.name"></p>
                            <p class="text-xs text-gray-500 dark:text-gray-400" x-text="setting.description"></p>
                        </div>
                    </label>
                    <p x-show="setting.is_env" class="text-sm text-red-500 dark:text-red-400">This setting is
                        currently set
                        via an environment variable and cannot be changed here.</p>
                    <input type="text" :id="setting.key" :name="setting.key" :value="setting.value"
                        class="block w-full px-3 py-2 mt-1 text-gray-600 dark:text-gray-200 placeholder-gray-400 bg-white dark:bg-neutral-950 border border-gray-200 dark:border-gray-50/30 rounded-md focus:border-blue-400 focus:outline-none focus:ring focus:ring-blue-300 focus:ring-opacity-40"
                        :disabled="isDisabled(setting.depends_on) || setting.is_env"
                        @change="updateSetting(setting, $event)">
                </div>
            </div>
        </template>
    </div>


</div>




<script>
    function settingsForm() {
        return {
            settings: [],

            fetchSettings() {
                fetch('/api/settings')
                    .then(response => response.json())
                    .then(data => {
                        this.settings = data;
                    })
                    .catch(error => console.error('Error fetching settings:', error));
            },

            isDisabled(dependsOnKey) {
                if (!dependsOnKey) return false;
                const parentSetting = this.settings.find(s => s.key === dependsOnKey);
                return !parentSetting || !parentSetting.value;
            },

            updateSetting(setting, event) {  // Add 'event' parameter
                // Determine the value based on the setting type and event target
                let value;
                if (setting.type === 'boolean') {
                    value = event.target.checked;  // For checkboxes
                } else if (setting.type === 'string') {
                    value = event.target.value;  // For text inputs
                } else {
                    console.error('Unsupported setting type');
                    return;
                }

                fetch(`{{ url_for("api.update_setting")}}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        // Add any necessary headers like authorization tokens
                    },
                    body: JSON.stringify({
                        key: setting.key,
                        value: value
                    })
                })
                    .then(response => {
                        if (response.ok) {
                            window.dispatchEvent(new CustomEvent('notice', {
                                detail: {
                                    type: 'success',
                                    text: 'Setting updated successfully'
                                }
                            }));
                            this.fetchSettings();
                        } else {
                            console.error('Error updating setting:', response);
                            window.dispatchEvent(new CustomEvent('notice', {
                                detail: {
                                    type: 'error',
                                    text: response.text()
                                }
                            }));
                            this.fetchSettings();
                        }
                    })
            }
        };
    }

</script>
{% endblock %}